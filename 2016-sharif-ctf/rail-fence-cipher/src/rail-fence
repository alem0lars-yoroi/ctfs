#!/usr/bin/python
# ------------------------------------------------------------------------------
# IMPORTS ----------------------------------------------------------------------

from shared.output import *
from shared.main   import *

# ------------------------------------------------------------------------------
# ALGORITHMS -------------------------------------------------------------------

class RailFenceCipher(object):
    def __init__(self, railsize):
        self._railsize = railsize

    def _fence(self, lst):
        fence = [[None] * len(lst) for n in range(self._railsize)]
        rails = (list(range(self._railsize - 1)) +
                 list(range(self._railsize - 1, 0, -1)))
        for n, x in enumerate(lst):
            fence[rails[n % len(rails)]][n] = x

        fence_str = ''
        for rail in fence:
            rail_data = []
            for c in rail:
                if c is None:
                    rail_data.append(colorize('.', YELLOW))
                else:
                    rail_data.append(colorize(str(c), BLUE))
            fence_str += ''.join(rail_data) + '\n'
        printdebug('Building rail fence\n{}'.format(fence_str))

        return [c for rail in fence for c in rail if c is not None]

class RailFenceEncoder(RailFenceCipher):
    def __init__(self, plaintext, railsize):
        super(RailFenceEncoder, self).__init__(railsize)
        self._plaintext = plaintext

    @classmethod
    def encodefromargs(cls, args):
        printtitle('Performing encoding')
        # Encode from command line arguments.
        for plaintext in args.plaintext:
            encoder = cls(plaintext, args.railsize)
            ciphertext = encoder.encode()
            printsuccess('{}\nhas been encoded to:\n{}'.format(
                hex(plaintext), ciphertext.dump()))

    def encode(self):
        printtitle('Encoding plaintext..')
        ciphertext = ''.join(self._fence(self._plaintext))
        printsuccess('Encoded plaintext into: {ciphertext}'.format(
                     ciphertext=colorize(ciphertext, CYAN)))
        return ciphertext

class RailFenceDecoder(RailFenceCipher):
    def __init__(self, ciphertext, railsize):
        super(RailFenceDecoder, self).__init__(railsize)
        self._ciphertext = ciphertext

    @classmethod
    def decodefromargs(cls, args):
        printtitle('Performing decoding')
        # Encode from command line arguments.
        for ciphertext in args.ciphertext:
            decoder = cls(ciphertext, args.railsize)
            ciphertext = decoder.decode()
            printsuccess('{}\nhas been decoded to:\n{}'.format(
                hex(ciphertext), plaintext))

    def decode(self):
        printtitle('Decoding ciphertext..')
        rng = range(len(self._ciphertext))
        positions = self._fence(rng)
        plaintext = ''.join(self._ciphertext[positions.index(n)] for n in rng)
        printsuccess('Decoded ciphertext into: {plaintext}'.format(
                     plaintext=colorize(plaintext, CYAN)))
        return plaintext

# ------------------------------------------------------------------------------
# TEST FUNCTIONS ---------------------------------------------------------------

def test():
    printtitle('Testing Fence Cipher encode/decode functions..')

    railsize = 21
    plaintext  = ('A-fence-is-a-structure-that-encloses-an-area,-SharifCTF'
                  '{QmFzZTY0IGlzIGEgZ2VuZXJpYyB0ZXJt},-typically-outdoors.')
    ciphertext = ('AaY--rpyfneJBeaaX0n-,ZZcs-uXeeSVJ-sh2tioaZ}slrg,-ciE-an'
                  'fGt.-eCIyss-TzprttFliora{GcouhQIadctm0ltt-FYluuezTyorZ-')

    decoded = RailFenceDecoder(ciphertext, railsize).decode()
    if plaintext == decoded:
        printsuccess('Decode success: plaintext == decoded')
    else:
        printerror('Decode failed: plaintext != decoded')

    encoded = RailFenceEncoder(plaintext, railsize).encode()
    if ciphertext == encoded:
        printsuccess('Encode success: ciphertext == encoded')
    else:
        printerror('Encode failed: ciphertext != encoded')

# ------------------------------------------------------------------------------
# ENTRY POINT ------------------------------------------------------------------

if __name__ == '__main__':
    printtitle('Starting Rail Fence')
    cmdmain('rail-fence', 'Rail Fence algorithm', {
            'encode': {
                'handler': RailFenceEncoder.encodefromargs,
                'args': [{
                    'name': '--railsize', 'required': True, 'type': autoint,
                    'help': 'The rail size (number of rows)',
                }, {
                    'name': 'PLAINTEXT', 'nargs': '+',
                    'help': 'Plaintext(s) to be encoded',
                }],
            },
            'decode': {
                'handler': RailFenceDecoder.decodefromargs,
                'args': [{
                    'name': '--railsize', 'required': True, 'type': autoint,
                    'help': 'The rail size (number of rows)',
                }, {
                    'name': 'CIPHERTEXT', 'nargs': '+',
                    'help': 'Ciphertext(s) to be decoded',
                }],
            },
        }, testfn=test)

# ------------------------------------------------------------------------------
# vim: set filetype=python :
