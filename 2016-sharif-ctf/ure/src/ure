#!/usr/bin/python
# ------------------------------------------------------------------------------
# IMPORTS ----------------------------------------------------------------------

from os.path import (join     as join_path,
                     dirname  as dir_name,
                     realpath as real_path)
from re      import  compile  as compile_regexp

from shared.output import (print_title, print_success, print_debug, colorize,
                           WHITE, CYAN)
from shared.files  import  parse_from_regexp
from shared.main   import  main_with_cmds, arg_autoint

# ------------------------------------------------------------------------------
# DATA STRUCTURES --------------------------------------------------------------

class UREEGR(object):
    def __init__(self, r0, r1):
        self._r0 = r0
        self._r1 = r1

    @property
    def r0(self): return self._r0

    @property
    def r1(self): return self._r1

class UREEGCipherText(object):
    def __init__(self, a, b, c, d, p):
        self.p = p
        self.a = a
        self.b = b
        self.c = c
        self.d = d

    @classmethod
    def fromfile(cls, file_name, p=None):
        path = join_path(dir_name(dir_name(real_path(__file__))), 'data', file_name)
        args = parse_from_regexp(
            path,
            ['a', 'b', 'c', 'd', 'p'],
            lambda name: compile_regexp('^{}\\s*=\\s*0x(.+)$'.format(name)),
            lambda md: int(md.group(1), 16))
        if not p is None and not 'p' in args:
            args['p'] = p
        return cls(args['a'], args['b'], args['c'], args['d'], args['p'])

    @property
    def a(self): return self._a
    @a.setter
    def a(self, value): self._a = value % self.p

    @property
    def b(self): return self._b
    @b.setter
    def b(self, value): self._b = value % self.p

    @property
    def c(self): return self._c
    @c.setter
    def c(self, value): self._c = value % self.p

    @property
    def d(self): return self._d
    @d.setter
    def d(self, value): self._d = value % self.p

    @property
    def p(self): return self._p
    @p.setter
    def p(self, value): self._p = value

    def __eq__(self, other):
        return (isinstance(other, self.__class__)
            and self.a == other.a
            and self.b == other.b
            and self.c == other.c
            and self.d == other.d)

    def __ne__(self, other):
        return not self.__eq__(other)

    def dump(self):
        info = [('a', self.a), ('b', self.b), ('c', self.c), ('d', self.d),
                ('p', self.p)]
        out = ''
        for name, value in info:
            out += '{}={}\n'.format(colorize(name, WHITE),
                                    colorize(hex(value), CYAN))
        return out

# ------------------------------------------------------------------------------
# ALGORITHMS -------------------------------------------------------------------

class UREEGReEncoder(object):
    def __init__(self, ciphertext, r):
        self._ciphertext = ciphertext
        self._r = r

    @classmethod
    def encode_from_args(cls, args):
        print_title('Performing re-encoding')
        # Encode from command line arguments.
        ciphertext = UREEGCipherText(args.a, args.b, args.c, args.d, args.p)
        r = UREEGR(args.r0, args.r1)
        re_encoder = cls(ciphertext, r)
        ciphertext = re_encoder.encode()
        print_success('Generated the following ciphertext:\n{}'.format(
            ciphertext.dump()))

    def encode(self):
        return UREEGCipherText(pow(self._ciphertext.a, self._r.r0),
                               pow(self._ciphertext.b, self._r.r0),
                               pow(self._ciphertext.c * self._ciphertext.a,
                                   self._r.r1),
                               pow(self._ciphertext.d * self._ciphertext.b,
                                   self._r.r1),
                               self._ciphertext.p)

# ------------------------------------------------------------------------------
# TEST FUNCTIONS ---------------------------------------------------------------

def test():
    print_title('Testing')

    # Build testing data structures.
    original = UREEGCipherText.fromfile('ciphertext.txt')
    expected = UREEGCipherText.fromfile('solution.txt', p=original.p)
    computed = UREEGReEncoder(original, UREEGR(2, 1)).encode()

    print_debug('Expected ciphertext:\n{}'.format(expected.dump()))
    print_debug('Computed ciphertext:\n{}'.format(computed.dump()))

    if computed == expected:
        print_success('The computed ciphertext is the same of the expected')
    else:
        print_success('The computed ciphertext is NOT the same of the expected')
        return -1

# ------------------------------------------------------------------------------
# ENTRY POINT ------------------------------------------------------------------

if __name__ == '__main__':
    print_title('Starting Universal Re-Encryption')
    main_with_cmds('ure', 'Universal Re-Encryption based on ElGamal algorithm', {
            'reencode': {
                'handler': UREEGReEncoder.encode_from_args,
                'args': [
                    {'name': '--a',  'required': True, 'type': arg_autoint},
                    {'name': '--b',  'required': True, 'type': arg_autoint},
                    {'name': '--c',  'required': True, 'type': arg_autoint},
                    {'name': '--d',  'required': True, 'type': arg_autoint},
                    {'name': '--p',  'required': True, 'type': arg_autoint},
                    {'name': '--r0', 'required': True, 'type': arg_autoint},
                    {'name': '--r1', 'required': True, 'type': arg_autoint},
                ],
            },
        }, testfn=test)

# ------------------------------------------------------------------------------
# vim: set filetype=python :
